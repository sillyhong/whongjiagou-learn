{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/diff.js","webpack:///./src/element.js","webpack:///./src/index.js","webpack:///./src/patch.js","webpack:///./src/utils.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;ACnEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,mBAAmB;AACnB,6BAA6B,4BAA4B;AACzD;AACA,KAAK;AACL;AACA;AACA;AACA,iCAAiC,qCAAqC;AACtE;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,iCAAiC,uCAAuC;AACxE;AACA;AACA;AACA,KAAK;AACL,6BAA6B,qCAAqC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sB;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iB;;;;;;;;;;;ACjClB,KAAK,gBAAgB;AACrB;AACA;AACA,+BAA+B,gBAAgB;AAC/C,yBAAyB,gBAAgB;AACzC,yBAAyB,gBAAgB;AACzC,yBAAyB,gBAAgB;AACzC;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C,yBAAyB,gBAAgB;AACzC,yBAAyB,gBAAgB;AACzC,yBAAyB,gBAAgB;AACzC,yBAAyB,gBAAgB;AACzC;AACA;AACA;AACA,GAAG,IAAI,sBAAsB,KAAK,sBAAsB,KAAK,sBAAsB;AACnF;;;;;;;;;;;;;ACnBA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uB;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,uB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","let utils = require('./utils');\r\n\r\nlet keyIndex = 0;\r\nfunction diff(oldTree, newTree) {\r\n    //记录差异的空对象。key就是老节点在原来虚拟DOM树中的序号，值就是一个差异对象数组\r\n    let patches = {};\r\n    keyIndex = 0;\r\n    let index = 0;\r\n    walk(oldTree, newTree, index, patches);\r\n    return patches;\r\n}\r\n//遍历\r\n//REMOVE: 'REMOVE',//此节点被移除\r\n//ATTRS: \"ATTRS\",//属性被改变\r\n//TEXT: \"TEXT\",//文本内容被改变\r\n//REPLACE: \"REPLACE\", //节点要被整个替换  \r\nfunction walk(oldNode, newNode, index, patches) {\r\n    let currentPatches = [];//这个数组里记录了所有的oldNode的变化\r\n    if (!newNode) {//如果新节点没有了，则认为此节点被删除了\r\n        currentPatches.push({ type: utils.REMOVE, index });\r\n        //如果说老节点的新的节点都是文本节点的话\r\n    } else if (utils.isString(oldNode) && utils.isString(newNode)) {\r\n        //如果新的字符符值和旧的不一样\r\n        if (oldNode != newNode) {\r\n            ///文本改变 \r\n            currentPatches.push({ type: utils.TEXT, content: newNode });\r\n        }\r\n    } else if (oldNode.tagName == newNode.tagName) {\r\n        //比较新旧元素的属性对象\r\n        let attrsPatch = diffAttr(oldNode.attrs, newNode.attrs);\r\n        //如果新旧元素有差异 的属性的话\r\n        if (Object.keys(attrsPatch).length > 0) {\r\n            //添加到差异数组中去\r\n            currentPatches.push({ type: utils.ATTRS, attrs: attrsPatch });\r\n        }\r\n        //自己比完后再比自己的儿子们\r\n        diffChildren(oldNode.children, newNode.children, index, patches, currentPatches);\r\n    } else {\r\n        currentPatches.push({ type: utils.REPLACE, node: newNode });\r\n    }\r\n    if (currentPatches.length > 0) {\r\n      patches[index] = currentPatches;\r\n    }\r\n}\r\n//老的节点的儿子们 新节点的儿子们 父节点的序号 完整补丁对象 当前旧节点的补丁对象\r\nfunction diffChildren(oldChildren, newChildren, index, patches, currentPatches) {\r\n    oldChildren.forEach((child, idx) => {\r\n        walk(child, newChildren[idx], ++keyIndex, patches);\r\n    });\r\n}\r\nfunction diffAttr(oldAttrs, newAttrs) {\r\n    let attrsPatch = {};\r\n    for (let attr in oldAttrs) {\r\n        //如果说老的属性和新属性不一样。一种是值改变 ，一种是属性被删除 了\r\n        if (oldAttrs[attr] != newAttrs[attr]) {\r\n            attrsPatch[attr] = newAttrs[attr];\r\n        }\r\n    }\r\n    for (let attr in newAttrs) {\r\n        if (!oldAttrs.hasOwnProperty(attr)) {\r\n            attrsPatch[attr] = newAttrs[attr];\r\n        }\r\n    }\r\n    return attrsPatch;\r\n}\r\nmodule.exports = diff;","let utils = require('./utils');\r\n/**\r\n * 1.标签类型 h1 div\r\n * 2.属性 className id \r\n * 3.子元素 可能是一个数组\r\n */\r\nclass Element {\r\n    //标签名 属性对象 子元素数组\r\n    constructor(tagName, attrs, children) {\r\n        this.tagName = tagName;\r\n        this.attrs = attrs;\r\n        this.children = children || [];\r\n    }\r\n    //把一个虚拟的DOM节点渲染成一个真实的DOM节点\r\n    render() {\r\n        //创建一个真实的DOM节点\r\n        let element = document.createElement(this.tagName);\r\n        //给此真实的DOM元素节点增加属性\r\n        for (let attr in this.attrs) {\r\n            utils.setAttr(element, attr, this.attrs[attr]);\r\n        }\r\n        //先序深度遍历\r\n        this.children.forEach(child => {\r\n            //如果子节点是一个元素的话，就调用它的render方法创建子节点的真实DOM，如果是一个字符串的话，创建一个文件节点就可以了\r\n            let childElement = (child instanceof Element) ? child.render() : document.createTextNode(child);\r\n            element.appendChild(childElement);\r\n        });\r\n        return element;\r\n    }\r\n}\r\nfunction createElement(tagName, attrs, children) {\r\n    return new Element(tagName, attrs, children);\r\n}\r\nmodule.exports = { createElement };","let { createElement } = require('./element');\r\nlet diff = require('./diff');\r\nlet patch = require('./patch');\r\nlet ul1 = createElement('ul', { class: 'list' }, [\r\n    createElement('li', { class: 'item' }, ['1']),\r\n    createElement('li', { class: 'item' }, ['2']),\r\n    createElement('li', { class: 'item' }, ['3'])\r\n]);\r\nlet root = ul1.render();\r\ndocument.body.appendChild(root);\r\nlet ul2 = createElement('ul', { class: 'list' }, [\r\n    createElement('li', { class: 'item' }, ['1']),\r\n    createElement('li', { class: 'item' }, ['2']),\r\n    createElement('li', { class: 'item' }, ['3']),\r\n    createElement('li', { class: 'item' }, ['4'])\r\n]);\r\nlet patches = diff(ul1, ul2);\r\nconsole.log(patches);\r\n//{2:[{type:'TEXT',content:3},4:[{type:'TEXT',content:2},6:[{type:'TEXT',content:1}]\r\npatch(root, patches);\r\n\r\n","let keyIndex = 0;\r\nlet utils = require('./utils');\r\nlet allPatches;//这里就是完整的补丁包\r\nfunction patch(root, patches) {\r\n    allPatches = patches;\r\n    walk(root);\r\n}\r\nfunction walk(node) {\r\n    let currentPatches = allPatches[keyIndex++];\r\n    (node.childNodes || []).forEach(child => walk(child));\r\n    if (currentPatches) {\r\n        doPatch(node, currentPatches);\r\n    }\r\n}\r\nfunction doPatch(node, currentPatches) {\r\n    currentPatches.forEach(patch => {\r\n        switch (patch.type) {\r\n            case utils.ATTRS:\r\n                for (let attr in patch.attrs) {\r\n                    let value = patch.attrs[attr];\r\n                    if (value) {\r\n                        utils.setAttr(node, attr, value);\r\n                    } else {\r\n                        node.removeAttribute(attr);\r\n                    }\r\n                }\r\n                break;\r\n            case utils.TEXT:\r\n                node.textContent = patch.content;\r\n                break;\r\n            case utils.REPLACE:\r\n                let newNode = (patch.node instanceof Element) ? path.node.render() : document.createTextNode(path.node);\r\n                node.parentNode.replaceChild(newNode, node);\r\n                break;\r\n            case utils.REMOVE:\r\n                node.parentNode.removeChild(node);\r\n                break;\r\n        }\r\n    });\r\n}\r\nmodule.exports = patch;","\r\nlet utils = {\r\n    //元素变化有哪些种类\r\n    REMOVE: 'REMOVE',//此节点被移除\r\n    ATTRS: \"ATTRS\",//属性被改变\r\n    TEXT: \"TEXT\",//文本内容被改变\r\n    REPLACE: \"REPLACE\", //节点要被整个替换  \r\n    setAttr(element, attr, value) {\r\n        switch (attr) {\r\n            case 'style':\r\n                element.style.cssText = value;\r\n                break;\r\n            case 'value':\r\n                let tagName = element.tagName.toLowerCase();\r\n                if (tagName == 'input' || tagName == 'textarea') {\r\n                    element.value = value;\r\n                } else {\r\n                    element.setAttribute(attr, value);\r\n                }\r\n                break;\r\n            default:\r\n                element.setAttribute(attr, value);\r\n                break;\r\n        }\r\n\r\n    },\r\n    type(obj) {\r\n        // [object String]\r\n        return Object.prototype.toString.call(obj).replace(/\\[object\\s|\\]/g, '');\r\n    },\r\n    isString(str) {\r\n        return utils.type(str) == 'String';\r\n    }\r\n}\r\nmodule.exports = utils;"],"sourceRoot":""}